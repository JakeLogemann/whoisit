//! bgpview.io response types
//!
//! Generated by: [QuickType.io](https://app.quicktype.io/)
//!
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
pub struct ASNPrefixes {
    pub status: String,
    pub status_message: String,
    pub data: Data,
    #[serde(rename = "@meta")]
    pub meta: Meta,
}

#[derive(Serialize, Deserialize)]
pub struct Data {
    pub ipv4_prefixes: Vec<IpvPrefix>,
    pub ipv6_prefixes: Vec<IpvPrefix>,
}

#[derive(Serialize, Deserialize)]
pub struct IpvPrefix {
    pub prefix: String,
    pub ip: String,
    pub cidr: i64,
    pub roa_status: RoaStatus,
    pub name: String,
    pub description: String,
    pub country_code: String,
    pub parent: Parent,
}

#[derive(Serialize, Deserialize)]
pub struct Parent {
    pub prefix: String,
    pub ip: String,
    pub cidr: i64,
    pub rir_name: RirName,
    pub allocation_status: AllocationStatus,
}

#[derive(Serialize, Deserialize)]
pub struct Meta {
    pub time_zone: String,
    pub api_version: i64,
    pub execution_time: String,
}

#[derive(Serialize, Deserialize)]
pub enum AllocationStatus {
    #[serde(rename = "unknown")]
    Unknown,
}

#[derive(Serialize, Deserialize)]
pub enum RirName {
    #[serde(rename = "AfriNIC")]
    AfriNic,
    #[serde(rename = "APNIC")]
    Apnic,
    #[serde(rename = "RIPE")]
    Ripe,
    #[serde(rename = "ARIN")]
    Arin,
    #[serde(rename = "Lacnic")]
    Lacnic,
}

#[derive(Serialize, Deserialize)]
pub enum RoaStatus {
    None,
}
